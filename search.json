[{"path":"https://extendr.github.io/h3o/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 h3o authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://extendr.github.io/h3o/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Josiah Parry. Author, copyright holder. Kenneth Vernon. Maintainer, contributor.","code":""},{"path":"https://extendr.github.io/h3o/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Parry J (2025). h3o: H3 Geospatial Indexing System. R package version 0.3.0, https://github.com/extendr/h3o.","code":"@Manual{,   title = {h3o: H3 Geospatial Indexing System},   author = {Josiah Parry},   year = {2025},   note = {R package version 0.3.0},   url = {https://github.com/extendr/h3o}, }"},{"path":"https://extendr.github.io/h3o/index.html","id":"h3o","dir":"","previous_headings":"","what":"H3 Geospatial Indexing System","title":"H3 Geospatial Indexing System","text":"h3o lightweight R package interacting Uber’s H3 Geospatial Indexing system. R package uses extendr wrap eponymous h3o Rust crate, offers pure Rust implementation H3, linking Uber’s H3 C library. package also intended work {sf} package geometric operations bonus represents H3 class {vctrs}, work seamlessly within tidyverse workflow.","code":""},{"path":"https://extendr.github.io/h3o/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"H3 Geospatial Indexing System","text":"can install release version h3o CRAN : can install development version GitHub :","code":"install.packages(\"h3o\") # install.packages(\"pak\") pak::pak(\"extendr/h3o\")"},{"path":"https://extendr.github.io/h3o/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"H3 Geospatial Indexing System","text":"H3 vectors can created POINT geometry columns (sfc objects) defined sf. H3 vectors also st_as_sfc() method allows conversion H3 cell indexes sf POLYGONs.  H3 cell centroids can returned using h3_to_points(). sf avilable, results returned sfc (sf column) object. Otherwise return list sfg (sf geometries).  H3Edge vectors representing boundaries H3 cells can created h3_edges(), h3_shared_edge_pairwise(), h3_shared_edge_sparse(). ’ve created list cell’s edges. can flatten using flatten_edges(). can cast sfc objects using st_as_sfc(). Additionally, can get vertexes H3 cell indexes using h3_to_vertexes() returns sfc_MULTIPOINT.","code":"library(h3o) library(dplyr) library(sf) library(tibble)  xy <- data.frame(   x = runif(100, -5, 10),   y = runif(100, 40, 50) )  pnts <- st_as_sf(   xy,   coords = c(\"x\", \"y\"),   crs = 4326 )  pnts |> mutate(h3 = h3_from_points(geometry, 5)) #> Simple feature collection with 100 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -4.906456 ymin: 40.13608 xmax: 9.720642 ymax: 49.77958 #> Geodetic CRS:  WGS 84 #> First 10 features: #>                       geometry              h3 #> 1    POINT (6.604776 48.68961) 851f8423fffffff #> 2  POINT (-0.6574923 40.42394) 85397237fffffff #> 3   POINT (-4.327095 46.43766) 851843dbfffffff #> 4    POINT (2.098711 40.28164) 85394283fffffff #> 5    POINT (8.558989 44.79674) 851f9bd7fffffff #> 6   POINT (-2.064705 47.93067) 8518637bfffffff #> 7    POINT (7.966344 47.88122) 851f8143fffffff #> 8    POINT (-1.18493 48.41385) 85186383fffffff #> 9   POINT (0.2382595 43.76685) 8539668ffffffff #> 10  POINT (0.2054317 48.94255) 85186573fffffff # replace geometry h3_cells <- pnts |>   mutate(     h3 = h3_from_points(geometry, 4),     geometry = st_as_sfc(h3)   )  # plot the hexagons plot(st_geometry(h3_cells)) # fetch h3 column h3s <- h3_cells[[\"h3\"]]  # get there centers h3_centers <- h3_to_points(h3s)  # plot the hexagons with the centers plot(st_geometry(h3_cells)) plot(h3_centers, pch = 16, add = TRUE, col = \"black\") cell_edges <- h3_edges(h3s[1:3]) cell_edges #> [[1]] #> <H3Edge[6]> #> [1] 1141f843ffffffff 1241f843ffffffff 1341f843ffffffff 1441f843ffffffff #> [5] 1541f843ffffffff 1641f843ffffffff #>  #> [[2]] #> <H3Edge[6]> #> [1] 11439723ffffffff 12439723ffffffff 13439723ffffffff 14439723ffffffff #> [5] 15439723ffffffff 16439723ffffffff #>  #> [[3]] #> <H3Edge[6]> #> [1] 1141843dffffffff 1241843dffffffff 1341843dffffffff 1441843dffffffff #> [5] 1541843dffffffff 1641843dffffffff cell_edges <- flatten_edges(cell_edges) cell_edges #> <H3Edge[18]> #>  [1] 1141f843ffffffff 1241f843ffffffff 1341f843ffffffff 1441f843ffffffff #>  [5] 1541f843ffffffff 1641f843ffffffff 11439723ffffffff 12439723ffffffff #>  [9] 13439723ffffffff 14439723ffffffff 15439723ffffffff 16439723ffffffff #> [13] 1141843dffffffff 1241843dffffffff 1341843dffffffff 1441843dffffffff #> [17] 1541843dffffffff 1641843dffffffff st_as_sfc(cell_edges) #> Geometry set for 18 features  #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: -4.577141 ymin: 40.10303 xmax: 6.908627 ymax: 48.92561 #> Geodetic CRS:  WGS 84 #> First 5 geometries: #> LINESTRING (6.828196 48.56718, 6.908627 48.78762) #> LINESTRING (6.24713 48.62253, 6.49798 48.48486) #> LINESTRING (6.49798 48.48486, 6.828196 48.56718) #> LINESTRING (6.656859 48.92561, 6.325574 48.84283) #> LINESTRING (6.908627 48.78762, 6.656859 48.92561) h3_to_vertexes(h3s) #> Geometry set for 100 features  #> Geometry type: MULTIPOINT #> Dimension:     XY #> Bounding box:  xmin: -5.162291 ymin: 40.02598 xmax: 10.1164 ymax: 50.08041 #> Geodetic CRS:  WGS 84 #> First 5 geometries: #> MULTIPOINT ((6.325574 48.84283), (6.24713 48.62... #> MULTIPOINT ((-0.6690999 40.57641), (-0.9475784 ... #> MULTIPOINT ((-4.227092 46.53696), (-4.535994 46... #> MULTIPOINT ((1.905903 40.46739), (1.849434 40.2... #> MULTIPOINT ((8.142693 44.78613), (8.062234 44.5..."},{"path":"https://extendr.github.io/h3o/index.html","id":"bench-marks","dir":"","previous_headings":"","what":"Bench marks","title":"H3 Geospatial Indexing System","text":"Since h3o written Rust, fast.","code":""},{"path":"https://extendr.github.io/h3o/index.html","id":"creating-polygons","dir":"","previous_headings":"Bench marks","what":"Creating polygons","title":"H3 Geospatial Indexing System","text":"","code":"h3_strs <- as.character(h3s) bench::mark(   h3o = st_as_sfc(h3s),   h3jsr = h3jsr::cell_to_polygon(h3_strs) ) #> # A tibble: 2 × 6 #>   expression      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 h3o         462.6µs  505.7µs     1863.    9.85KB     14.6 #> 2 h3jsr        8.34ms   9.36ms      106.     2.7MB     90.0"},{"path":"https://extendr.github.io/h3o/index.html","id":"converting-polygons-to-h3-cells","dir":"","previous_headings":"Bench marks","what":"Converting polygons to H3 cells:","title":"H3 Geospatial Indexing System","text":"","code":"nc <- st_read(system.file(\"gpkg/nc.gpkg\", package = \"sf\"), quiet = TRUE) |>   st_transform(4326) |>   st_geometry()  bench::mark(   h3o = sfc_to_cells(nc, 5, \"centroid\"),   h3jsr = h3jsr::polygon_to_cells(nc, 5),   check = FALSE ) #> # A tibble: 2 × 6 #>   expression      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 h3o           4.8ms   5.35ms     183.     21.4KB    11.3  #> 2 h3jsr        27.6ms  28.51ms      34.8   748.7KB     4.97"},{"path":"https://extendr.github.io/h3o/index.html","id":"converting-points-to-cells","dir":"","previous_headings":"Bench marks","what":"Converting points to cells","title":"H3 Geospatial Indexing System","text":"","code":"bench::mark(   h3o = h3_from_points(pnts$geometry, 3),   h3jsr = h3jsr::point_to_cell(pnts$geometry, 3),   check = FALSE ) #> # A tibble: 2 × 6 #>   expression      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 h3o         103.4µs  123.3µs     7372.      848B     11.4 #> 2 h3jsr        2.63ms   3.04ms      326.     975KB     13.3"},{"path":"https://extendr.github.io/h3o/index.html","id":"retrieve-edges","dir":"","previous_headings":"Bench marks","what":"Retrieve edges","title":"H3 Geospatial Indexing System","text":"","code":"bench::mark(   h3o = h3_edges(h3s),   h3jsr = h3jsr::get_udedges(h3_strs),   check = FALSE ) #> # A tibble: 2 × 6 #>   expression      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 h3o         403.5µs  530.3µs     1593.      848B     16.9 #> 2 h3jsr        1.64ms   1.76ms      555.    67.9KB     17.3"},{"path":"https://extendr.github.io/h3o/index.html","id":"get-origins-and-destinations-from-edges","dir":"","previous_headings":"Bench marks","what":"Get origins and destinations from edges.","title":"H3 Geospatial Indexing System","text":"","code":"# get edges for a single location eds <- h3_edges(h3s[1])[[1]] # strings for h3jsr eds_str <- as.character(eds)  bench::mark(   h3o = h3_edge_cells(eds),   h3jsr = h3jsr::get_udends(eds_str),   check = FALSE ) #> # A tibble: 2 × 6 #>   expression      min   median `itr/sec` mem_alloc `gc/sec` #>   <bch:expr> <bch:tm> <bch:tm>     <dbl> <bch:byt>    <dbl> #> 1 h3o          12.9µs   18.1µs    49775.    7.86KB     19.9 #> 2 h3jsr       631.3µs  740.1µs     1248.   19.82KB     12.9"},{"path":"https://extendr.github.io/h3o/reference/H3.html","id":null,"dir":"Reference","previous_headings":"","what":"Create H3 Index — h3_from_xy","title":"Create H3 Index — h3_from_xy","text":"Create H3 indices sfc objects, vectors x y coordinates, H3 string IDs.","code":""},{"path":"https://extendr.github.io/h3o/reference/H3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create H3 Index — h3_from_xy","text":"","code":"h3_from_xy(x, y, resolution)  h3_from_points(x, resolution)  h3_from_strings(x)  h3_to_points(x)  h3_to_vertexes(x)  # S3 method for class 'H3' as.character(x, ...)  flatten_h3(x)  is_h3(x)"},{"path":"https://extendr.github.io/h3o/reference/H3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create H3 Index — h3_from_xy","text":"x h3_from_points() object class sfc_POINT. h3_from_strings() character vector H3 index IDs. h3_from_xy() numeric vector longitudes. y numeric vector latitudes. resolution integer indicating H3 cell resolution. Must 0 15 inclusive. ... unused.","code":""},{"path":"https://extendr.github.io/h3o/reference/H3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create H3 Index — h3_from_xy","text":"See details.","code":""},{"path":"https://extendr.github.io/h3o/reference/H3.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create H3 Index — h3_from_xy","text":"h3_from_points(): takes sfc_POINT object creates vector H3 cells h3_from_strings(): converts character vector cell indexes H3 vector h3_from_xy(): converts vectors x y coordinates H3 vector h3_to_points(): converts H3 vector either sfc_POINT object list sfg POINT objects. h3_to_vertexes(): converts H3 vector sfc_MULTIPOINT object list MULTIPOINT objects.","code":""},{"path":"https://extendr.github.io/h3o/reference/H3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create H3 Index — h3_from_xy","text":"","code":"h3_from_xy(-90, 120, 5) #> <H3[1]> #> [1] 85f29383fffffff  h3_from_strings(\"85f29383fffffff\") #> <H3[1]> #> [1] 85f29383fffffff  if (requireNamespace(\"sf\")) {   # create random points   pnts <- sf::st_cast(     sf::st_sfc(       sf::st_multipoint(matrix(runif(10, max = 90), ncol = 2)),       crs = 4326     ),     \"POINT\"   )    # convert to H3 objects   h3s <- h3_from_points(pnts, 5)    h3_to_vertexes(h3s)    h3_to_points(h3s) } #> Geometry set for 5 features  #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 0.7605052 ymin: 15.68115 xmax: 54.05352 ymax: 78.72561 #> Geodetic CRS:  WGS 84 #> POINT (54.05352 26.14981) #> POINT (14.19107 65.93194) #> POINT (0.7605052 69.49418) #> POINT (42.23951 78.72561) #> POINT (44.75921 15.68115)  h3_ids <- c(\"831f91fffffffff\", \"831fb5fffffffff\", \"831f94fffffffff\")  flatten_h3(   list(     NULL,     h3_from_strings(h3_ids),     h3_from_strings(h3_ids[1])   ) ) #> <H3[4]> #> [1] 831f91fffffffff 831fb5fffffffff 831f94fffffffff 831f91fffffffff"},{"path":"https://extendr.github.io/h3o/reference/compact_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Compact H3 Cells — compact_cells","title":"Compact H3 Cells — compact_cells","text":"Reduce set H3 indices resolution minimum number H3 indices varying resolution entirely covers input area.","code":""},{"path":"https://extendr.github.io/h3o/reference/compact_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compact H3 Cells — compact_cells","text":"","code":"compact_cells(x)  uncompact_cells(x, resolution)"},{"path":"https://extendr.github.io/h3o/reference/compact_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compact H3 Cells — compact_cells","text":"x vector H3 indexes. resolution scalar integer representing grid resolution range [0, 15].","code":""},{"path":"https://extendr.github.io/h3o/reference/compact_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compact H3 Cells — compact_cells","text":"H3 vector.","code":""},{"path":"https://extendr.github.io/h3o/reference/compact_cells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compact H3 Cells — compact_cells","text":"","code":"x <- h3_from_strings(\"841f91dffffffff\") y <- uncompact_cells(x, 5)[[1]] z <- compact_cells(y) all.equal(x, z) #> [1] TRUE"},{"path":"https://extendr.github.io/h3o/reference/edges.html","id":null,"dir":"Reference","previous_headings":"","what":"H3 Edges — h3_edges","title":"H3 Edges — h3_edges","text":"Functions create work H3Edge vectors. See Details details.","code":""},{"path":"https://extendr.github.io/h3o/reference/edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"H3 Edges — h3_edges","text":"","code":"h3_edges(x, flat = FALSE)  h3_shared_edge_sparse(x, y)  h3_shared_edge_pairwise(x, y)  is_edge(x)  is_valid_edge(x)  h3_edges_from_strings(x)  flatten_edges(x)  h3_edge_cells(x)  h3_edge_origin(x)  h3_edge_destination(x)  # S3 method for class 'H3Edge' as.character(x, ...)"},{"path":"https://extendr.github.io/h3o/reference/edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"H3 Edges — h3_edges","text":"x H3 vector flat default FALSE. TRUE return single vector combining edges H3 cells. y H3 vector ... unused.","code":""},{"path":"https://extendr.github.io/h3o/reference/edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"H3 Edges — h3_edges","text":"See details.","code":""},{"path":"https://extendr.github.io/h3o/reference/edges.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"H3 Edges — h3_edges","text":"h3_edges(): returns list H3Edge vectors H3 index. flat = TRUE, returns single H3Edge vector. h3_shared_edge_pairwise(): returns H3Edge vector shared edges. shared edge NA returned. h3_shared_edge_sparse(): returns list H3Edge vectors. element iterates element y checking shared edge. is_edge(): returns TRUE element inherits H3Edge class. is_valid_edge(): checks element character vector determine valid edge ID. h3_edges_from_strings(): create H3Edge vector character vector. flatten_edges(): flattens list H3Edge vectors single H3Edge vector. h3_edge_cells(): returns list length 2 named H3Edge vectors origin destination cells h3_edge_origin(): returns vector H3Edge origin cells h3_edge_destination(): returns vector H3Edge destination cells","code":""},{"path":"https://extendr.github.io/h3o/reference/edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"H3 Edges — h3_edges","text":"","code":"# create an H3 cell x <- h3_from_xy(-122, 38, 5)  # find all edges and flatten edges <- h3_edges(x) |>   flatten_edges()  # check if they are all edges is_edge(edges) #> [1] TRUE  # check if valid edge strings is_valid_edge(c(\"115e22da7fffffff\", \"abcd\")) #> [1]  TRUE FALSE  # get the origin cell of the edge h3_edge_origin(edges) #> <H3[6]> #> [1] 85e22da7fffffff 85e22da7fffffff 85e22da7fffffff 85e22da7fffffff #> [5] 85e22da7fffffff 85e22da7fffffff  # get the destination of the edge h3_edge_destination(edges) #> <H3[6]> #> [1] 85e22da7fffffff 85e22da7fffffff 85e22da7fffffff 85e22da7fffffff #> [5] 85e22da7fffffff 85e22da7fffffff  # get both origin and destination cells h3_edge_cells(edges) #> [[1]] #> <H3[2]> #>          origin     destination  #> 85e22da7fffffff 85e35ad3fffffff  #>  #> [[2]] #> <H3[2]> #>          origin     destination  #> 85e22da7fffffff 85e22daffffffff  #>  #> [[3]] #> <H3[2]> #>          origin     destination  #> 85e22da7fffffff 85e35adbfffffff  #>  #> [[4]] #> <H3[2]> #>          origin     destination  #> 85e22da7fffffff 85e22db7fffffff  #>  #> [[5]] #> <H3[2]> #>          origin     destination  #> 85e22da7fffffff 85e35e6bfffffff  #>  #> [[6]] #> <H3[2]> #>          origin     destination  #> 85e22da7fffffff 85e22da3fffffff  #>   # create edges from strings h3_edges_from_strings(c(\"115e22da7fffffff\", \"abcd\")) #> <H3Edge[2]> #> [1] 115e22da7fffffff NA                # create a vector of cells cells_ids <-c(   \"85e22da7fffffff\", \"85e35ad3fffffff\",   \"85e22daffffffff\", \"85e35adbfffffff\",   \"85e22da3fffffff\" )  cells <- h3o::h3_from_strings(cells_ids)  # find shared edges between the two pairwise h3_shared_edge_pairwise(cells, rev(cells)) #> <H3Edge[5]> #> [1] 165e22da7fffffff 125e35ad3fffffff NA               155e35adbfffffff #> [5] 115e22da3fffffff  # get the sparse shared eddge. Finds all possible shared edges. h3_shared_edge_sparse(cells, cells) #> [[1]] #> <H3Edge[5]> #> [1] NA               115e22da7fffffff 125e22da7fffffff 135e22da7fffffff #> [5] 165e22da7fffffff #>  #> [[2]] #> <H3Edge[5]> #> [1] 165e35ad3fffffff NA               NA               125e35ad3fffffff #> [5] NA               #>  #> [[3]] #> <H3Edge[5]> #> [1] 155e22daffffffff NA               NA               115e22daffffffff #> [5] 145e22daffffffff #>  #> [[4]] #> <H3Edge[5]> #> [1] 145e35adbfffffff 155e35adbfffffff 165e35adbfffffff NA               #> [5] NA               #>  #> [[5]] #> <H3Edge[5]> #> [1] 115e22da3fffffff NA               135e22da3fffffff NA               #> [5] NA               #>"},{"path":"https://extendr.github.io/h3o/reference/grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Grid Traversal — grid_disk","title":"Grid Traversal — grid_disk","text":"Functions used traverse H3 grid.","code":""},{"path":"https://extendr.github.io/h3o/reference/grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Grid Traversal — grid_disk","text":"","code":"grid_disk(x, k = 1, safe = TRUE)  grid_ring(x, k = 1)  grid_distances(x, k = 1)  grid_path_cells(x, y)  grid_path_cells_size(x, y)  grid_distance(x, y)  grid_local_ij(x, y)"},{"path":"https://extendr.github.io/h3o/reference/grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Grid Traversal — grid_disk","text":"x H3 vector. k order ring neighbors. 0 focal location (observed H3 index). 1 immediate neighbors H3 index. 2 neighbors 1st order neighbors . safe default TRUE. FALSE uses fast algorithm can fail. y H3 vector.","code":""},{"path":"https://extendr.github.io/h3o/reference/grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Grid Traversal — grid_disk","text":"See details.","code":""},{"path":"https://extendr.github.io/h3o/reference/grid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Grid Traversal — grid_disk","text":"grid_disk(): returns disk cells identified K ring. disk returns cells create complete geometry without holes. See grid_ring() want inclusive neighbors. grid_ring(): returns K ring neighbors around H3 cell. grid_distances(): returns list numeric vectors indicating network distances neighbors K ring. first element always 0 travel distance one's self 0. H3 index missing 0 length vector returned. grid_path_cells(): returns list H3 vectors indicating cells traversed get x y. either x y missing, empty vector returned. grid_path_cells_size(): returns integer vector cell path distance pairwise elements x y. either x y missing result NA. grid_distance(): returns integer vector network distance pairwise elements x y. either x y missing result NA. Effectively grid_path_cells_size() - 1. grid_local_ij() returns two column data frame containing columns j correspond ,j coordinate directions destination cell.","code":""},{"path":"https://extendr.github.io/h3o/reference/grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Grid Traversal — grid_disk","text":"","code":"h3_strs <- c(\"841f91dffffffff\", \"841fb59ffffffff\") h3 <- h3_from_strings(h3_strs)  grid_disk(h3, 1) #> [[1]] #> <H3[7]> #> [1] 841f91dffffffff 841f903ffffffff 841f915ffffffff 841f911ffffffff #> [5] 841f919ffffffff 841f957ffffffff 841f90bffffffff #>  #> [[2]] #> <H3[7]> #> [1] 841fb59ffffffff 841fb5dffffffff 841fb51ffffffff 841fb5bffffffff #> [5] 841fa65ffffffff 841949bffffffff 8419493ffffffff #>  grid_ring(h3, 2) #> [[1]] #> <H3[12]> #>  [1] 841f951ffffffff 841f955ffffffff 841f909ffffffff 841f901ffffffff #>  [5] 841f907ffffffff 841f939ffffffff 841f93bffffffff 841f917ffffffff #>  [9] 841f913ffffffff 841f91bffffffff 841f825ffffffff 841f953ffffffff #>  #> [[2]] #> <H3[12]> #>  [1] 8419499ffffffff 8419491ffffffff 8419497ffffffff 841fb4bffffffff #>  [5] 841fb43ffffffff 841fb55ffffffff 841fb57ffffffff 841fb53ffffffff #>  [9] 841fa2dffffffff 841fa67ffffffff 841fa61ffffffff 841fa6dffffffff #>  grid_distances(h3, 2) #> [[1]] #>  [1] 0 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 #>  #> [[2]] #>  [1] 0 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 #>  grid_path_cells(h3, rev(h3)) #> [[1]] #> <H3[11]> #>  [1] 841f91dffffffff 841f957ffffffff 841f951ffffffff 841f959ffffffff #>  [5] 841fb33ffffffff 841fb3bffffffff 841fb15ffffffff 841fb1dffffffff #>  [9] 841fb57ffffffff 841fb51ffffffff 841fb59ffffffff #>  #> [[2]] #> <H3[11]> #>  [1] 841fb59ffffffff 841fb51ffffffff 841fb57ffffffff 841fb1dffffffff #>  [5] 841fb15ffffffff 841fb3bffffffff 841fb33ffffffff 841f959ffffffff #>  [9] 841f951ffffffff 841f957ffffffff 841f91dffffffff #>  grid_path_cells_size(h3, rev(h3)) #> [1] 11 11 grid_distance(h3, rev(h3)) #> [1] 10 10 grid_local_ij(h3, rev(h3)) #>    i  j #> 1 13 26 #> 2 23 26"},{"path":"https://extendr.github.io/h3o/reference/hierarchy.html","id":null,"dir":"Reference","previous_headings":"","what":"Hierarchical H3 Grid Functions — get_parents","title":"Hierarchical H3 Grid Functions — get_parents","text":"Functions used traverse hierarchy H3 grids.","code":""},{"path":"https://extendr.github.io/h3o/reference/hierarchy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hierarchical H3 Grid Functions — get_parents","text":"","code":"get_parents(x, resolution)  get_children(x, resolution)  get_children_count(x, resolution)  get_children_center(x, resolution)  get_children_position(x, resolution)  get_children_at(x, position, resolution)"},{"path":"https://extendr.github.io/h3o/reference/hierarchy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hierarchical H3 Grid Functions — get_parents","text":"x H3 vector. resolution scalar integer representing grid resolution range [0, 15]. position integer position ordered set cells.","code":""},{"path":"https://extendr.github.io/h3o/reference/hierarchy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hierarchical H3 Grid Functions — get_parents","text":"See details.","code":""},{"path":"https://extendr.github.io/h3o/reference/hierarchy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hierarchical H3 Grid Functions — get_parents","text":"get_parents(): returns parent cells H3 vector given resolution. Errors resolution smaller provided cell. get_children(): returns list H3 vectors containing children H3 cell specified resolution. resolution greater cell's resolution empty vector returned. get_children_count(): returns integer vector containing number children cell specified resolution. get_children_center(): returns middle child (center child) children H3 cell specified resolution H3 vector. get_children_position(): returns position observed H3 cell ordered list children child higher resolution cell (PR clearer language welcome). get_children_at(): returns child H3 cell specified resolution based position ordered list (PR clearer language welcome).","code":""},{"path":"https://extendr.github.io/h3o/reference/hierarchy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hierarchical H3 Grid Functions — get_parents","text":"","code":"h3_strs <- c(\"841f91dffffffff\", \"841fb59ffffffff\") h3 <- h3_from_strings(h3_strs)  get_parents(h3, 3) #> <H3[2]> #> [1] 831f91fffffffff 831fb5fffffffff get_children(h3, 5) #> [[1]] #> <H3[7]> #> [1] 851f91c3fffffff 851f91c7fffffff 851f91cbfffffff 851f91cffffffff #> [5] 851f91d3fffffff 851f91d7fffffff 851f91dbfffffff #>  #> [[2]] #> <H3[7]> #> [1] 851fb583fffffff 851fb587fffffff 851fb58bfffffff 851fb58ffffffff #> [5] 851fb593fffffff 851fb597fffffff 851fb59bfffffff #>  get_children_count(h3, 6) #> [1] 49 49 get_children_position(h3, 3) #> [1] 6 4 get_children_at(h3, 999, 10) #> <H3[2]> #> [1] 8a1f91c02caffff 8a1fb5802caffff"},{"path":"https://extendr.github.io/h3o/reference/inspection.html","id":null,"dir":"Reference","previous_headings":"","what":"H3 Inspection Functions — h3_resolution","title":"H3 Inspection Functions — h3_resolution","text":"Functions provide metadata H3 indexes.","code":""},{"path":"https://extendr.github.io/h3o/reference/inspection.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"H3 Inspection Functions — h3_resolution","text":"","code":"h3_resolution(x)  h3_base_cell(x)  is_valid_h3(x)  is_res_class_iii(x)  is_pentagon(x)  get_face_count(x)"},{"path":"https://extendr.github.io/h3o/reference/inspection.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"H3 Inspection Functions — h3_resolution","text":"x H3 vector.","code":""},{"path":"https://extendr.github.io/h3o/reference/inspection.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"H3 Inspection Functions — h3_resolution","text":"See details.","code":""},{"path":"https://extendr.github.io/h3o/reference/inspection.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"H3 Inspection Functions — h3_resolution","text":"h3_resolution(): returns resolution H3 cell. h3_base_cell(): returns base cell integer. is_valid_h3(): given vector H3 index string IDs, determine valid. is_res_class_iii(): determines H3 cell Class III orientation. is_pentagon(): determines H3 cell one rare pentagons. get_face_count(): returns number faces intersect H3 index.","code":""},{"path":"https://extendr.github.io/h3o/reference/inspection.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"H3 Inspection Functions — h3_resolution","text":"","code":"cells_ids <-c(     \"85e22da7fffffff\", \"85e35ad3fffffff\",      \"85e22daffffffff\", \"85e35adbfffffff\",      \"85e22db7fffffff\", \"85e35e6bfffffff\",     \"85e22da3fffffff\"   )     cells <- h3o::h3_from_strings(cells_ids)  h3_resolution(cells) #> [1] 5 5 5 5 5 5 5 h3_base_cell(cells) #> [1] 113 113 113 113 113 113 113 is_valid_h3(c(\"85e22db7fffffff\", NA, \"oopsies\")) #> [1]  TRUE    NA FALSE is_res_class_iii(cells) #> [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE is_res_class_iii(h3_from_xy(0, 0, 10)) #> [1] FALSE is_pentagon(h3_from_strings(\"08FD600000000000\")) #> [1] TRUE get_face_count(cells) #> [1] 2 2 2 2 2 2 2"},{"path":"https://extendr.github.io/h3o/reference/is_nb.html","id":null,"dir":"Reference","previous_headings":"","what":"H3 index neighbors — is_nb_pairwise","title":"H3 index neighbors — is_nb_pairwise","text":"Test two H3 cells neighbors.","code":""},{"path":"https://extendr.github.io/h3o/reference/is_nb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"H3 index neighbors — is_nb_pairwise","text":"","code":"is_nb_pairwise(x, y)  is_nb_sparse(x, y)"},{"path":"https://extendr.github.io/h3o/reference/is_nb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"H3 index neighbors — is_nb_pairwise","text":"x H3 vector. y H3 vector.","code":""},{"path":"https://extendr.github.io/h3o/reference/is_nb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"H3 index neighbors — is_nb_pairwise","text":"is_nb_pairwise() returns logical vector wheraas is_nb_sparse() returns list logical vector elements.","code":""},{"path":"https://extendr.github.io/h3o/reference/is_nb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"H3 index neighbors — is_nb_pairwise","text":"","code":"cells_ids <-c(   \"85e22da7fffffff\", \"85e35ad3fffffff\",   \"85e22daffffffff\", \"85e35adbfffffff\",   \"85e22db7fffffff\", \"85e35e6bfffffff\",   \"85e22da3fffffff\" )  cells <- h3o::h3_from_strings(cells_ids)  is_nb_pairwise(cells, rev(cells)) #> [1]  TRUE  TRUE FALSE FALSE FALSE  TRUE  TRUE is_nb_sparse(cells, cells) #> [[1]] #> [1] FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE #>  #> [[2]] #> [1]  TRUE FALSE FALSE  TRUE FALSE  TRUE FALSE #>  #> [[3]] #> [1]  TRUE FALSE FALSE  TRUE FALSE FALSE  TRUE #>  #> [[4]] #> [1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE #>  #> [[5]] #> [1]  TRUE FALSE FALSE FALSE FALSE  TRUE  TRUE #>  #> [[6]] #> [1]  TRUE  TRUE FALSE FALSE  TRUE FALSE FALSE #>  #> [[7]] #> [1]  TRUE FALSE  TRUE FALSE  TRUE FALSE FALSE #>"},{"path":"https://extendr.github.io/h3o/reference/sfc_to_cells.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert sf geometry to H3 Cells — sfc_to_cells","title":"Convert sf geometry to H3 Cells — sfc_to_cells","text":"Given vector sf geometries (class sfc) create list H3 vectors. list element contains vector H3 cells cover geometry.","code":""},{"path":"https://extendr.github.io/h3o/reference/sfc_to_cells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert sf geometry to H3 Cells — sfc_to_cells","text":"","code":"sfc_to_cells(x, resolution, containment = \"intersect\")"},{"path":"https://extendr.github.io/h3o/reference/sfc_to_cells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert sf geometry to H3 Cells — sfc_to_cells","text":"x h3_from_points() object class sfc_POINT. h3_from_strings() character vector H3 index IDs. h3_from_xy() numeric vector longitudes. resolution integer indicating H3 cell resolution. Must 0 15 inclusive. containment default \"intersect\". Must one \"intersect\", \"centroid\", \"boundary\". See details.","code":""},{"path":"https://extendr.github.io/h3o/reference/sfc_to_cells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert sf geometry to H3 Cells — sfc_to_cells","text":"H3 vector.","code":""},{"path":"https://extendr.github.io/h3o/reference/sfc_to_cells.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert sf geometry to H3 Cells — sfc_to_cells","text":"Note, use flatten_h3() reduce list single vector. Containment Mode determines H3 cell returned. \"centroid\" returns every cell whose centroid contained inside polygon. fastest option may cover entire polygon. \"boundary\" returns cells completely contained polygon. Much polygon might covered using approach. \"intersect\" ensures polygon entirely covered. H3 cell comes contact polygon returned. default. \"contains\" behaves \"intersect\", also handles case geometry covered cell without intersecting boundaries. cases, covering cell returned.","code":""},{"path":"https://extendr.github.io/h3o/reference/sfc_to_cells.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert sf geometry to H3 Cells — sfc_to_cells","text":"","code":"if (interactive() && rlang::is_installed(\"sf\")) {   nc <- sf::st_read(system.file(\"shape/nc.shp\", package = \"sf\"), quiet = TRUE)   geo <- sf::st_geometry(nc)   cells <- sfc_to_cells(geo, 5)    head(cells)    plot(flatten_h3(cells)) }"},{"path":"https://extendr.github.io/h3o/news/index.html","id":"h3o-030","dir":"Changelog","previous_headings":"","what":"h3o 0.3.0","title":"h3o 0.3.0","text":"CRAN release: 2025-08-29 Now CRAN \"covers\" containment mode now supported to_cells() renamed sfc_to_cells() h3o dependency bumped version 0.4.0 sfc_to_cells() gets new argument containment based ContainmentMode enum","code":""},{"path":"https://extendr.github.io/h3o/news/index.html","id":"h3o-020","dir":"Changelog","previous_headings":"","what":"h3o 0.2.0","title":"h3o 0.2.0","text":"Adds wk::wk_handler function conversion sfc, geos, s2, types implement handler. New functionality: to_cells() convert sfc object H3 cells. Refactors Rust code avoid collecting Lists prevent Stack Overflow bug. Bumps h3o version 0.3.5 get speed memory enhancements.","code":""},{"path":"https://extendr.github.io/h3o/news/index.html","id":"h3o-010","dir":"Changelog","previous_headings":"","what":"h3o 0.1.0","title":"h3o 0.1.0","text":"Added NEWS.md file track changes package.","code":""}]
